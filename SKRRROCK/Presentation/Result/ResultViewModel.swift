//
//  ResultViewModel.swift
//  SKRRROCK
//
//  Created by Jun on 8/9/25.
//

import Foundation
import SwiftData
import SwiftUI

struct ResultViewData: Hashable {
  let targetLearner: TargetLearner
}

protocol ResultViewModel {
  var isLoading: Bool { get }
  var score: Int { get }
  var targetLearnerName: String { get }
  var isShowingNicknameInput: Bool { get }
  var nickname: String { get }

  func getFirstMessage() -> String
  func getSecondMessage() -> String
  func getDanceImageName() -> String

  func retry()

  func setIsShowingNicknameInput(_ isShowingNicknameInput: Bool)
  func setNickname(_ nickname: String)
  func analyzeRecord()
  func uploadScore(_ context: ModelContext)
}

@Observable
class DefaultResultViewModel: ResultViewModel {
  private(set) var isLoading: Bool
  private(set) var score: Int
  private(set) var targetLearnerName: String
  private(set) var isShowingNicknameInput: Bool
  private(set) var nickname: String

  private let resultViewData: ResultViewData

  private let appCoordinator: AppCoordinator?

  init(resultViewData: ResultViewData, appCoordinator: AppCoordinator? = nil) {
    self.isLoading = false
    self.score = 0
    self.targetLearnerName = resultViewData.targetLearner.name
    self.isShowingNicknameInput = false
    self.nickname = ""

    self.resultViewData = resultViewData

    self.appCoordinator = appCoordinator
  }

  func getFirstMessage() -> String {
    switch score {
    case 100:
      return "ÏôÑÏ†Ñ ÎòëÍ∞ôÏùÄÎç∞?"
    case 90...99:
      return "ÏõÉÏùåÏù¥ ÎÑà~Î¨¥ ÎòëÍ∞ôÏïÑÏÑú"
    case 80...89:
      return "\(targetLearnerName)Ïù¥ ÏôÑ~Ï†Ñ Ïã¨Ïøµ!"
    case 70...79:
      return "ÌîºÏπò Good~ ÏÑ±Îüâ Good~"
    case 60...69:
      return "ÏÑ±ÏùòÎäî Î∞±Ï†ê ÏõÉÏùåÏùÄ Ï¢Ä Îçî~"
    case 50...59:
      return "ÏõÉÍ∏∞Îßå ÌïòÍ≥†"
    case 40...49:
      return "ÎÑà~~Ïñ¥ Ïù¥ ÏõÉÏùåÏóê Ï°∞Í∏àÎßå Îçî Ïßë! Ï§ë!"
    case 30...39:
      return "ÌÜ†Îã•ÌÜ†Îã•~üòá"
    case 20...29:
      return "Ïù¥ Ï†êÏàò ÏßÑÏßú Ïñ¥Ï©åÎ©¥ Ï¢ãÏßÄ?"
    case 10...19:
      return "Ï†êÏàò Îî∞ÏúÑ ÏÉÅÍ¥ÄÏóÜÏù¥"
    default:
      return "Îã§ÏùåÏóî Îçî ÏûòÌï† Ïàò ÏûàÏñ¥Ïöî!"
    }
  }

  func getSecondMessage() -> String {
    switch score {
    case 100:
      return "ÎãπÏã† ÌòπÏãú \(targetLearnerName)ÏïÑÎãàÏÑ∏Ïöî?"
    case 90...99:
      return "\(targetLearnerName)Ïù¥ Í∏∞Ï†à!"
    case 80...89:
      return "Ï†ïÎßê Î©ãÏ†∏ÏöîÏûâ"
    case 70...79:
      return "ÏïÑ~Ï£º ÎòëÍ∞ôÏïÑÏöîüòÅ"
    case 60...69:
      return ""
    case 50...59:
      return "ÏõÉÏùåÏùÄ Ïïà Îî∞ÎùºÌï†ÎÅºÎãà?"
    case 40...49:
      return ""
    case 30...39:
      return "Îã§Ïùå ÏõÉÏùåÏùÄ 100Ï†ê Í∞ÄÎ≥¥Ï¶àÏïÑ~!"
    case 20...29:
      return "Î™®Î•¥Í≤åÏíÄÏöî~"
    case 10...19:
      return "ÏõÉÎäîÎã§Í≥† Ï†ÑÌï¥Îùº~"
    default:
      return "Ìè¨Í∏∞ÌïòÏßÄ ÎßêÍ≥† Îã§Ïãú ÎèÑÏ†Ñ!"
    }
  }

  func getDanceImageName() -> String {
    let learnerMapping: [String: String] = [
      "Í¥ëÎ°ú": "gwangro",
      "ÏÑ∏ÎÇò": "sena",
      "ÏóêÎîî": "eddey",
      "Ï≤¥Î¶¨": "cherry",
    ]

    if let rawValue = learnerMapping[targetLearnerName] {
      return "\(rawValue)_dance"
    }

    return "dance_1"
  }

  func retry() {
    appCoordinator?.pop()
  }

  func setIsShowingNicknameInput(_ isShowingNicknameInput: Bool) {
    self.isShowingNicknameInput = isShowingNicknameInput
  }

  func setNickname(_ nickname: String) {
    self.nickname = nickname
  }

  func analyzeRecord() {
    self.isLoading = true

    defer {
      self.isLoading = false
    }

    // TODO: ÎÖπÏùå ÎπÑÍµê Î∂ÑÏÑù Î°úÏßÅ
  }

  func uploadScore(_ context: ModelContext) {
    let repository = ShadowingRecordRepository(context: context)

    do {
      try repository.saveScore(
        userName: nickname,
        targetLearner: resultViewData.targetLearner,
        finalScore: score
      )
    } catch {
      print("Ï†êÏàò Ï†ÄÏû• Ïã§Ìå®: \(error)")
    }

    let scoreBoardViewData = ScoreBoardViewData(targetLearner: resultViewData.targetLearner)

    appCoordinator?.push(.scoreBoard(scoreBoardViewData))
  }
}
